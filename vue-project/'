<template>
  <v-app>
    <v-row class="mb-1">
      <v-col
        class="align-center d-flex justify-start"
        style="font-size:x-large;"
      >
        <span class="module-title">Simulation Report History</span>
      </v-col>

      <v-col class="d-flex justify-end">
        <!-- Compare Reports Button -->
        <v-btn
          label="Compare Reports"
          class="mr-5"
          tile
          style="text-transform:none;"
          :color="enabled ? 'error' : '#89A1AD'"
          @click="enabled = !enabled"
        >
          <p v-if="!enabled">
            Compare Reports
          </p>
          <p v-if="enabled">
            Cancel
          </p>
        </v-btn>

        <v-menu
          v-model="drawer"
          location="start"
          :close-on-content-click="false"
          transition="slide-x-reverse-transition"
        >
          <template #activator="{ props }">
            <!-- Filter Reports Button -->
            <v-btn
              v-bind="props"
              icon
              tile
              @click="drawer=!drawer;"
            >
              <v-icon>mdi-filter</v-icon>
            </v-btn>
          </template>

          <!-- Filter Reports Menu -->
          <v-card
            width="300px"
          >
            <v-col>
              <v-row>
                <v-text-field
                  v-model="searchValue"
                  single-line
                  density="compac"
                  label="Search Reports"
                  append-icon="mdi-magnify"
                  @update:modelValue="filter"
                />
              </v-row>
              <v-divider></v-divider>
              <v-row>
                <v-col>
                  <v-text-field
                    v-model="fromDate"
                    flat
                    solo-filled
                    hide-details
                    outlined
                    density="compac"
                    single-line
                    label="From"
                    type="datetime-local"
                  >
                  </v-text-field>
                </v-col>
                <v-col>
                  <v-text-field
                    v-model="toDate"
                    flat
                    hide-details
                    style="font-size:xx-small"
                    outlined
                    density="compac"
                    single-line
                    label="To"
                    type="datetime-local"
                  >
                  </v-text-field>
                </v-col>
              </v-row>
              <v-divider></v-divider>
              <v-row>
                <v-col>
                  <v-autocomplete
                    v-model="selectedPrintJobs"
                    density="compac"
                    variant="solo-filled"
                    single-line
                    style="overflow-y:auto"
                    multiple
                    :items="printJobs"
                    item-title="Title"
                    item-value="Title"
                    label="Printing Job"
                    @update:modelValue="filter"
                  >
                  </v-autocomplete>
                  <v-autocomplete
                    v-model="selectedWorkflows"
                    density="compac"
                    variant="solo-filled"
                    single-line
                    multiple
                    :items="workflows"
                    item-title="Title"
                    item-value="Title"
                    label="Workflow"
                    @update:modelValue="filter"
                  >
                  </v-autocomplete>
                </v-col>
              </v-row>
            </v-col>
          </v-card>
        </v-menu>
      </v-col>
    </v-row>

    <!-- List of reports -->
    <div
      style="width:98%;"
      class="report-history-table"
    >
      <v-list
        no-gutters
        style="padding:0px;"
      >
        <v-list-item
          v-for="(report, index) in simulationReportsDisplay"
          :key="index"
          no-gutters
          style="padding:0;"
        >
          <v-card
            class="report-history-item"
            @click="$emit('select-report', report.id)"
          >
            <v-row
              style="height:100%;"
              no-gutters
            >
              <Transition name="slide-fade">
                <v-col
                  v-if="enabled"
                  class="card-selection-tab"
                  @click.stop="report.selected = !(report.selected)"
                >
                  <v-btn
                    icon
                    medium
                    style="background-color:lightslategray; justify-self:center; align-self:center;"
                    border="false"
                    flat
                  >
                    <v-icon v-if="!report.selected">
                      mdi-radiobox-blank
                    </v-icon>
                    <v-icon v-if="report.selected">
                      mdi-radiobox-marked
                    </v-icon>
                  </v-btn>
                </v-col>
              </Transition>
              <v-col
                style="height: 100%;"
              >
                <v-row
                  style="width: 100%;"
                  no-gutters
                >
                  <v-col
                    cols="3"
                  >
                    <v-card-text class="item-desc">
                      Print Job:
                    </v-card-text>
                    <v-card-text class="item-desc">
                      Workflow:
                    </v-card-text>
                  </v-col>

                  <v-col
                    cols="3"
                  >
                    <v-card-text
                      class="item-val"
                    >
                      {{ report.PrintJobTitle ? report.PrintJobTitle : 'N/A' }}
                    </v-card-text>
                    <v-card-text
                      class="item-val"
                    >
                      {{ report.WorkflowTitle ? report.WorkflowTitle : 'N/A' }}
                    </v-card-text>
                  </v-col>

                  <v-col
                    cols="3"
                  >
                    <v-card-text class="item-desc">
                      Total Time:
                    </v-card-text>
                  </v-col>
                  <v-col
                    cols="3"
                  >
                    <v-card-text class="item-val">
                      {{ report.TotalTimeTaken ? report.TotalTimeTaken : 'N/A' }}
                      secs.
                    </v-card-text>
                  </v-col>
                </v-row>
                <v-row>
                  <v-col
                    cols="3"
                  >
                    <v-card-text class="item-desc">
                      Created:
                    </v-card-text>
                  </v-col>
                  <v-col
                    cols="3"
                  >
                    <v-card-text class="item-val">
                      {{ report.Date }} @ {{ report.Time }}
                    </v-card-text>
                  </v-col>
                </v-row>
              </v-col>
            </v-row>
          </v-card>
        </v-list-item>
      </v-list>
    </div>
  </v-app>
</template>

<script setup>
  import { nextTick, ref, onMounted, watch } from "vue";

  const {
    simulationReports = [],
    workflows = [],
    printJobs = []
  }
  =
  defineProps({
    simulationReports: Array,
    workflows : Array,
    printJobs: Array,
  });

  const emit = defineEmits(['select-report']);

  const simulationReportsDisplay = ref([]);
  const searchValue = ref('');
  const drawer = ref(false);
  const selectedPrintJobs = ref([]);
  const selectedWorkflows = ref([]);
  const fromDate = ref(null);
  const toDate = ref(null);
  const enabled = ref(false);

  ///////////////////////////////
  ///// Filters and Searching
  ///////////////////////////////
  const filter = () => {
    nextTick(() => {
      simulationReportsDisplay.value = filterSelections(simulationReportsDisplay.value, selectedPrintJobs.value, selectedPrintJobs.value);
      simulationReportsDisplay.value = filterSearchTerm(simulationReportsDisplay.value, searchValue.value.toLowerCase());
    });
  };

  /**
  * Filter a list of simulation reports based on
  * whether they are included in the provided list of printjobs or workflows.
  * @param {Array} list of simulation reports
  * @param {Array} list of selected print jobs
  * @param {Array} list of selected workflows
  * @returns {Array} filtered list of simulation reports
  */
  const filterSelections = (reports, selPrintJobs, selWorkflows) => {
    const printJobLookup = {};
    const workflowLookup = {};

    selectedPrintJobs.value.forEach( (job) => {
      printJobLookup[job] = true;
    });

    selectedWorkflows.value.forEach( (flow) => {
      workflowLookup[flow] = true;
    });

    const filteringPrintJobs = (selPrintJobs.length > 0);
    const filteringWorkflows = (selWorkflows.length > 0);

     return reports.filter( (report) => {
        if (filteringWorkflows && !workflowLookup[report.WorkflowTitle]){
          return false;
        }

        if (filteringPrintJobs && !printJobLookup[report.PrintJobTitle]) {
          return false;
        }

        return true;
      });
  };

  /**
  * Filter a list of simulation reports based on a search term.
  * Reports will be included if a workflow title AND/OR printjob title
  * matches the search term.
  * @param {Array} list of simulation reports
  * @param {string} a search term
  * @returns {Array} list of filtered simulation reports
  */
  const filterSearchTerm = (simulationReports, term) => {
      if (!term) {
        return simulationReports;
      }

      return simulationReports.filter((report) => {
        if ((!report.PrintJobTitle) || (!report.WorkflowTitle)) {
          return false;
        }

        const matchPrintJobTitle = report.PrintJobTitle.toLowerCase().includes(term);
        const matchWorkflowTitle = report.WorkflowTitle.toLowerCase().includes(term);

        return (matchPrintJobTitle || matchWorkflowTitle);
      });
  };

  // Watch list of simulation reports for any changes.
  watch(
    () => {
      return simulationReports
    },
    (newReports) => {
      simulationReportsDisplay.value = newReports;
      filter();
    },
    { immediate: true }
  );

  onMounted( async () => {
    simulationReportsDisplay.value = simulationReports;
  });
</script>

<style>
.report-history-item {
  height:125px;
  border-width:1px;
  border-left-width:0px;
  border-right-width:0px;
  border-top-width:1px;
}

.report-history-table {
  height:98vh;
  border-width:1px;
  border-style:solid;
  border-color:rgba(0, 0, 0, 0.1);
  overflow-y:auto;
}

.report-history-item:hover {
	opacity: 0.9;
  border-left: solid;
  border-right: solid;
  border-color: lightgray;
  border-width: 2px;
	cursor: pointer;
}

.slide-fade-enter-active {
  transition: all 0.1s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.1s cubic-bezier(1, 0.5, 0.8, 1);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(-20px);
  opacity: 1;
}
.card-selection-tab {
  max-width: 50px;
  height:100%;
  align-content: center;
  background-color:lightslategray;
  align-content:center;
  justify-content:center;
}
</style>

